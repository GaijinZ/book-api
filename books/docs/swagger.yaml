definitions:
  models.BookRequest:
    type: object
host: localhost:5001
info:
  contact: {}
  title: BookAPI Service
  version: "1.0"
paths:
  /v1/books:
    get:
      consumes:
      - application/json
      description: Retrieves all books from the database.
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Retrieve all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Adds a new book to the database.
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book object to be added
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Add a new book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Updates an existing book in the database.
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Update an existing book
      tags:
      - books
  /v1/books/{book_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a book by its ID from the database.
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Retrieve a book by ID
      tags:
      - books
  /v1/books/{bookID}:
    delete:
      consumes:
      - application/json
      description: Deletes a book from the database.
      parameters:
      - description: Book ID to delete
        in: path
        name: bookID
        required: true
        type: integer
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Delete a book
      tags:
      - books
swagger: "2.0"
